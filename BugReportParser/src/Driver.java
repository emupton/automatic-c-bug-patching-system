import java.io.File;
import java.io.IOException;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;

/**
 * Very simple class to parse a bug report file generated by scan-build.
 * Uses JSoup framework for parsing HTML.
 * 
 * 
 * @author emma
 */
public class Driver {
	/**
	 * Supply file directory of problem report .html file as first command line argument
	 * 
	 * @param args
	 * @throws IOException
	 */
	public static void main(String args[]) throws IOException{
		String filename = "";
		if(args.length == 0){
			System.out.println("File not found! Defaulting to report-25d370 for debugging purposes");
			filename = "/Users/emma/Desktop/problem3/2016-01-26-140713-29740-1/report-25d370.html";
		}
		else{
			filename = args[0];
		}
		
		File input = new File(filename);
		Document doc = Jsoup.parse(input, "UTF-8", "http://example.com/");
		//sending input to Jsoup's parse function
		
		Elements matches = doc.getElementsByClass("simpletable");
		//getting all elements whom's class is "simpletable"
		Element table = matches.first();
		//getting first element
		
		Elements columns = table.getElementsByTag("td");
		//obtaining the columns from 'table'
		Element bugDescriptor = columns.last();
		//getting the bug descriptor, which is the last column
		
		String description = bugDescriptor.ownText();
		//obtaining the bug description from the bug descriptor column
		
		System.out.print(description);
		//printing out the bug description
		
		matches = doc.getElementsByClass("code");
		table = matches.first();
		//getting the table that contains the problem code line numbers
		
		Elements rows = table.getElementsByTag("tr");
		//getting the rows
		Elements divs = table.getElementsByAttributeValueContaining("id","Path");
		//getting any elements that have "Path" in their id attribute; this means the previous row in the table has a bug
		//elements that have "Path" in their id attribute are describing the bug found in the preceding line
		
		for(Element div : divs){
			//looping through div elements
			Node parent = div.parentNode().parentNode();
			Node lineColumn = parent.previousSibling().previousSibling();
			//logic to find the bug line
			Elements contents = ((Element) lineColumn).getElementsByAttributeValue("class", "num");
			System.out.print("," + contents.text());
			//printing out the line number of the problem line
		}
		
		
	}
}
